//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.11.25 at 12:23:12 PM CET 
//


package no.difi.meldingsutveksling.domain.sbdh;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;
import no.difi.meldingsutveksling.domain.PartnerIdentifier;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.*;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;


/**
 * Java class for StandardBusinessDocument complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="StandardBusinessDocument">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader}StandardBusinessDocumentHeader" minOccurs="0"/>
 *         <any processContents='lax' namespace='##other'/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StandardBusinessDocument", propOrder = {
        "standardBusinessDocumentHeader",
        "any"
})
@Data
@SuppressWarnings("unused")
public class StandardBusinessDocument {

    @XmlElement(name = "StandardBusinessDocumentHeader")
    @NotNull
    @Valid
    private StandardBusinessDocumentHeader standardBusinessDocumentHeader;

    @XmlAnyElement(lax = true)
    @NotNull
    private Object any;

    @JsonIgnore
    public <T> Optional<T> getBusinessMessage(Class<T> clazz) {
        return clazz.isInstance(any) ? Optional.of(clazz.cast(any)) : Optional.empty();
    }

    @JsonIgnore
    public Optional<String> getMessageId() {
        return Optional.ofNullable(standardBusinessDocumentHeader.getDocumentIdentification())
                .flatMap(p -> Optional.ofNullable(p.getInstanceIdentifier()));
    }

    @JsonIgnore
    public Optional<String> getDocumentType() {
        return Optional.ofNullable(standardBusinessDocumentHeader.getDocumentIdentification())
                .flatMap(p -> Optional.ofNullable(p.getStandard()));
    }

    @JsonIgnore
    public Optional<String> getProcess() {
        return getScope(ScopeType.CONVERSATION_ID)
                .flatMap(p -> Optional.of(p.getIdentifier()));
    }

    @JsonIgnore
    public Set<Scope> getScopes() {
        return Optional.ofNullable(standardBusinessDocumentHeader.getBusinessScope())
                .flatMap(p -> Optional.ofNullable(p.getScope()))
                .orElseGet(Collections::emptySet);
    }

    @JsonIgnore
    public Optional<Scope> getScope(ScopeType scopeType) {
        return Optional.ofNullable(standardBusinessDocumentHeader)
                .flatMap(p -> p.getScope(scopeType));
    }

    @JsonIgnore
    public void addScope(Scope scope) {
        Optional.ofNullable(standardBusinessDocumentHeader.getBusinessScope()).ifPresent(p -> p.addScopes(scope));
    }

    @JsonIgnore
    public Optional<String> getConversationId() {
        return Optional.ofNullable(standardBusinessDocumentHeader)
                .map(StandardBusinessDocumentHeader::getConversationId)
                .orElse(null);
    }

    @JsonIgnore
    public Optional<String> getType() {
        return Optional.ofNullable(standardBusinessDocumentHeader.getDocumentIdentification())
                .flatMap(p -> Optional.ofNullable(p.getType()));
    }

    @JsonIgnore
    public Optional<OffsetDateTime> getExpectedResponseDateTime() {
        return Optional.ofNullable(standardBusinessDocumentHeader)
                .flatMap(StandardBusinessDocumentHeader::getExpectedResponseDateTime);
    }

    @JsonIgnore
    public PartnerIdentifier getSenderIdentifier() {
        return Optional.ofNullable(standardBusinessDocumentHeader)
                .map(StandardBusinessDocumentHeader::getSenderIdentifier)
                .orElse(null);
    }

    @JsonIgnore
    public StandardBusinessDocument setSenderIdentifier(PartnerIdentifier identifier) {
        getOrCreateStandardBusinessDocumentHeader().setSenderIdentifier(identifier);
        return this;
    }

    @JsonIgnore
    public PartnerIdentifier getReceiverIdentifier() {
        return Optional.ofNullable(standardBusinessDocumentHeader)
                .map(StandardBusinessDocumentHeader::getReceiverIdentifier)
                .orElse(null);
    }

    @JsonIgnore
    public StandardBusinessDocument setReceiverIdentifier(PartnerIdentifier identifier) {
        getOrCreateStandardBusinessDocumentHeader().setReceiverIdentifier(identifier);
        return this;
    }

    private StandardBusinessDocumentHeader getOrCreateStandardBusinessDocumentHeader() {
        if (standardBusinessDocumentHeader == null) {
            standardBusinessDocumentHeader = new StandardBusinessDocumentHeader();
        }

        return standardBusinessDocumentHeader;
    }
}
